<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://old-camel-github-io.vercel.app</id>
    <title>Old Camel</title>
    <updated>2020-12-09T07:14:57.993Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://old-camel-github-io.vercel.app"/>
    <link rel="self" href="https://old-camel-github-io.vercel.app/atom.xml"/>
    <subtitle>日常开发记录</subtitle>
    <logo>https://old-camel-github-io.vercel.app/images/avatar.png</logo>
    <icon>https://old-camel-github-io.vercel.app/favicon.ico</icon>
    <rights>All rights reserved 2020, Old Camel</rights>
    <entry>
        <title type="html"><![CDATA[Test]]></title>
        <id>https://old-camel-github-io.vercel.app/post/test/</id>
        <link href="https://old-camel-github-io.vercel.app/post/test/">
        </link>
        <updated>2020-12-09T06:38:56.000Z</updated>
        <content type="html"><![CDATA[<p>`</p>
<p>/** UnitTest for {@link BeamSqlCli}. */<br>
public class sqltest {<br>
@Test<br>
public void testExecute_createTextTable() throws Exception {<br>
InMemoryMetaStore metaStore = new InMemoryMetaStore();<br>
metaStore.registerProvider(new TextTableProvider());</p>
<pre><code>    BeamSqlCli cli = new BeamSqlCli().metaStore(metaStore);
    cli.execute(
            &quot;CREATE EXTERNAL TABLE person (\n&quot;
                    + &quot;id int COMMENT 'id', \n&quot;
                    + &quot;name varchar COMMENT 'name', \n&quot;
                    + &quot;age int COMMENT 'age') \n&quot;
                    + &quot;TYPE 'text' \n&quot;
                    + &quot;COMMENT '' LOCATION '/Users/xucheng/beamlocation/test'&quot;);
    Table table = metaStore.getTables().get(&quot;person&quot;);
    assertNotNull(table);
    assertEquals(
            Stream.of(
                    Field.of(&quot;id&quot;, INTEGER).withDescription(&quot;id&quot;).withNullable(true),
                    Field.of(&quot;name&quot;, VARCHAR).withDescription(&quot;name&quot;).withNullable(true),
                    Field.of(&quot;age&quot;, INTEGER).withDescription(&quot;age&quot;).withNullable(true))
                    .collect(toSchema()),
            table.getSchema());
}

@Test
public void testExecute_createTableWithPrefixArrayField() throws Exception {
    InMemoryMetaStore metaStore = new InMemoryMetaStore();
    metaStore.registerProvider(new TextTableProvider());

    BeamSqlCli cli = new BeamSqlCli().metaStore(metaStore);
    cli.execute(
            &quot;CREATE EXTERNAL TABLE person (\n&quot;
                    + &quot;id int COMMENT 'id', \n&quot;
                    + &quot;name varchar COMMENT 'name', \n&quot;
                    + &quot;age int COMMENT 'age', \n&quot;
                    + &quot;tags ARRAY&lt;VARCHAR&gt;, \n&quot;
                    + &quot;matrix ARRAY&lt;ARRAY&lt;INTEGER&gt;&gt; \n&quot;
                    + &quot;) \n&quot;
                    + &quot;TYPE 'text' \n&quot;
                    + &quot;COMMENT '' LOCATION '/Users/xucheng/beamlocation/test'&quot;);
    Table table = metaStore.getTables().get(&quot;person&quot;);
    assertNotNull(table);
    assertEquals(
            Stream.of(
                    Field.of(&quot;id&quot;, INTEGER).withDescription(&quot;id&quot;).withNullable(true),
                    Field.of(&quot;name&quot;, VARCHAR).withDescription(&quot;name&quot;).withNullable(true),
                    Field.of(&quot;age&quot;, INTEGER).withDescription(&quot;age&quot;).withNullable(true),
                    Field.of(&quot;tags&quot;, Schema.FieldType.array(VARCHAR)).withNullable(true),
                    Field.of(&quot;matrix&quot;, Schema.FieldType.array(Schema.FieldType.array(INTEGER)))
                            .withNullable(true))
                    .collect(toSchema()),
            table.getSchema());
}

@Test
public void testExecute_createTableWithPrefixMapField() throws Exception {
    InMemoryMetaStore metaStore = new InMemoryMetaStore();
    metaStore.registerProvider(new TextTableProvider());

    BeamSqlCli cli = new BeamSqlCli().metaStore(metaStore);
    cli.execute(
            &quot;CREATE EXTERNAL TABLE person (\n&quot;
                    + &quot;id int COMMENT 'id', \n&quot;
                    + &quot;name varchar COMMENT 'name', \n&quot;
                    + &quot;age int COMMENT 'age', \n&quot;
                    + &quot;tags MAP&lt;VARCHAR, VARCHAR&gt;, \n&quot;
                    + &quot;nestedMap MAP&lt;INTEGER, MAP&lt;VARCHAR, INTEGER&gt;&gt; \n&quot;
                    + &quot;) \n&quot;
                    + &quot;TYPE 'text' \n&quot;
                    + &quot;COMMENT '' LOCATION '/Users/xucheng/beamlocation/test'&quot;);
    Table table = metaStore.getTables().get(&quot;person&quot;);
    assertNotNull(table);
    assertEquals(
            Stream.of(
                    Field.of(&quot;id&quot;, INTEGER).withDescription(&quot;id&quot;).withNullable(true),
                    Field.of(&quot;name&quot;, VARCHAR).withDescription(&quot;name&quot;).withNullable(true),
                    Field.of(&quot;age&quot;, INTEGER).withDescription(&quot;age&quot;).withNullable(true),
                    Field.of(&quot;tags&quot;, Schema.FieldType.map(VARCHAR, VARCHAR)).withNullable(true),
                    Field.of(
                            &quot;nestedMap&quot;,
                            Schema.FieldType.map(INTEGER, Schema.FieldType.map(VARCHAR, INTEGER)))
                            .withNullable(true))
                    .collect(toSchema()),
            table.getSchema());
}

@Test
public void testExecute_createTableWithRowField() throws Exception {
    InMemoryMetaStore metaStore = new InMemoryMetaStore();
    metaStore.registerProvider(new TextTableProvider());

    BeamSqlCli cli = new BeamSqlCli().metaStore(metaStore);
    cli.execute(
            &quot;CREATE EXTERNAL TABLE person (\n&quot;
                    + &quot;id int COMMENT 'id', \n&quot;
                    + &quot;name varchar COMMENT 'name', \n&quot;
                    + &quot;age int COMMENT 'age', \n&quot;
                    + &quot;address ROW ( \n&quot;
                    + &quot;  street VARCHAR, \n&quot;
                    + &quot;  country VARCHAR \n&quot;
                    + &quot;  ), \n&quot;
                    + &quot;addressAngular ROW&lt; \n&quot;
                    + &quot;  street VARCHAR, \n&quot;
                    + &quot;  country VARCHAR \n&quot;
                    + &quot;  &gt;, \n&quot;
                    + &quot;isRobot BOOLEAN&quot;
                    + &quot;) \n&quot;
                    + &quot;TYPE 'text' \n&quot;
                    + &quot;COMMENT '' LOCATION '/Users/xucheng/beamlocation/test'&quot;);
    Table table = metaStore.getTables().get(&quot;person&quot;);
    assertNotNull(table);
    assertEquals(
            Stream.of(
                    Field.of(&quot;id&quot;, INTEGER).withDescription(&quot;id&quot;).withNullable(true),
                    Field.of(&quot;name&quot;, VARCHAR).withDescription(&quot;name&quot;).withNullable(true),
                    Field.of(&quot;age&quot;, INTEGER).withDescription(&quot;age&quot;).withNullable(true),
                    Field.of(
                            &quot;address&quot;,
                            Schema.FieldType.row(
                                    Schema.builder()
                                            .addNullableField(&quot;street&quot;, VARCHAR)
                                            .addNullableField(&quot;country&quot;, VARCHAR)
                                            .build()))
                            .withNullable(true),
                    Field.of(
                            &quot;addressAngular&quot;,
                            Schema.FieldType.row(
                                    Schema.builder()
                                            .addNullableField(&quot;street&quot;, VARCHAR)
                                            .addNullableField(&quot;country&quot;, VARCHAR)
                                            .build()))
                            .withNullable(true),
                    Field.of(&quot;isRobot&quot;, BOOLEAN).withNullable(true))
                    .collect(toSchema()),
            table.getSchema());
}

@Test
public void testExecute_dropTable() throws Exception {
    InMemoryMetaStore metaStore = new InMemoryMetaStore();
    metaStore.registerProvider(new TextTableProvider());

    BeamSqlCli cli = new BeamSqlCli().metaStore(metaStore);
    cli.execute(
            &quot;CREATE EXTERNAL TABLE person (\n&quot;
                    + &quot;id int COMMENT 'id', \n&quot;
                    + &quot;name varchar COMMENT 'name', \n&quot;
                    + &quot;age int COMMENT 'age') \n&quot;
                    + &quot;TYPE 'text' \n&quot;
                    + &quot;COMMENT '' LOCATION '/Users/xucheng/beamlocation/test'&quot;);
    Table table = metaStore.getTables().get(&quot;person&quot;);
    assertNotNull(table);

    cli.execute(&quot;drop table person&quot;);
    table = metaStore.getTables().get(&quot;person&quot;);
    assertNull(table);
}

@Test(expected = ParseException.class)
public void testExecute_dropTable_assertTableRemovedFromPlanner() throws Exception {
    InMemoryMetaStore metaStore = new InMemoryMetaStore();
    metaStore.registerProvider(new TextTableProvider());

    BeamSqlCli cli = new BeamSqlCli().metaStore(metaStore);
    cli.execute(
            &quot;CREATE EXTERNAL TABLE person (\n&quot;
                    + &quot;id int COMMENT 'id', \n&quot;
                    + &quot;name varchar COMMENT 'name', \n&quot;
                    + &quot;age int COMMENT 'age') \n&quot;
                    + &quot;TYPE 'text' \n&quot;
                    + &quot;COMMENT '' LOCATION '/Users/xucheng/beamlocation/test'&quot;);
    cli.execute(&quot;drop table person&quot;);
    cli.explainQuery(&quot;select * from person&quot;);
}

@Test
public void testExplainQuery() throws Exception {
    InMemoryMetaStore metaStore = new InMemoryMetaStore();
    metaStore.registerProvider(new TextTableProvider());

    BeamSqlCli cli = new BeamSqlCli().metaStore(metaStore);

    cli.execute(
            &quot;CREATE EXTERNAL TABLE person (\n&quot;
                    + &quot;id int COMMENT 'id', \n&quot;
                    + &quot;name varchar COMMENT 'name', \n&quot;
                    + &quot;age int COMMENT 'age') \n&quot;
                    + &quot;TYPE 'text' \n&quot;
                    + &quot;COMMENT '' LOCATION '/Users/xucheng/beamlocation/test'&quot;);

    String plan = cli.explainQuery(&quot;select * from person&quot;);
    assertThat(
            plan,
            equalTo(
                    &quot;BeamCalcRel(expr#0..2=[{inputs}], proj#0..2=[{exprs}])\n&quot;
                            + &quot;  BeamIOSourceRel(table=[[beam, person]])\n&quot;));
}

@Test
public void test_time_types() throws Exception {
    InMemoryMetaStore metaStore = new InMemoryMetaStore();
    TestTableProvider testTableProvider = new TestTableProvider();
    metaStore.registerProvider(testTableProvider);

    BeamSqlCli cli = new BeamSqlCli().metaStore(metaStore);
    cli.execute(
            &quot;CREATE EXTERNAL TABLE test_table (\n&quot;
                    + &quot;f_date DATE, \n&quot;
                    + &quot;f_time TIME, \n&quot;
                    + &quot;f_ts TIMESTAMP&quot;
                    + &quot;) \n&quot;
                    + &quot;TYPE 'test' \n&quot;
                    + &quot;COMMENT '' LOCATION '/Users/xucheng/beamlocation/test1'&quot;);

    cli.execute(
            &quot;INSERT INTO test_table VALUES (&quot;
                    + &quot;DATE '2018-11-01', &quot;
                    + &quot;TIME '15:23:59', &quot;
                    + &quot;TIMESTAMP '2018-07-01 21:26:07.123' )&quot;);

    Table table = metaStore.getTables().get(&quot;test_table&quot;);
    assertNotNull(table);
    TestTableProvider.TableWithRows tableWithRows = testTableProvider.tables().get(table.getName());
    assertEquals(1, tableWithRows.getRows().size());
    Row row = tableWithRows.getRows().get(0);
    assertEquals(3, row.getFieldCount());

    // test DATE field
    //assertEquals(&quot;2018-11-01&quot;, row.getLogicalTypeValue(&quot;f_date&quot;, LocalDate.class).toString());
    // test TIME field
    //assertEquals(&quot;15:23:59&quot;, row.getLogicalTypeValue(&quot;f_time&quot;, LocalTime.class).toString());
    // test TIMESTAMP field
    //assertEquals(parseTimestampWithUTCTimeZone(&quot;2018-07-01 21:26:07.123&quot;), row.getDateTime(&quot;f_ts&quot;));
}
@Test
public void text_time_types() throws Exception {
    InMemoryMetaStore metaStore = new InMemoryMetaStore();
    TextTableProvider testTableProvider = new TextTableProvider();
    metaStore.registerProvider(testTableProvider);

    BeamSqlCli cli = new BeamSqlCli().metaStore(metaStore);
    cli.execute(
            &quot;CREATE EXTERNAL TABLE test_table (\n&quot;
                    + &quot;f_date DATE, \n&quot;
                    + &quot;f_time TIME, \n&quot;
                    + &quot;f_ts TIMESTAMP&quot;
                    + &quot;) \n&quot;
                    + &quot;TYPE 'text' \n&quot;
                    + &quot;COMMENT '' LOCATION '/Users/xucheng/beamlocation/test1'&quot;);

    cli.execute(
            &quot;INSERT INTO test_table VALUES (&quot;
                    + &quot;DATE '2018-11-01', &quot;
                    + &quot;TIME '15:23:59', &quot;
                    + &quot;TIMESTAMP '2018-07-01 21:26:07.123' )&quot;);

    Table table = metaStore.getTables().get(&quot;test_table&quot;);
    assertNotNull(table);

    cli.getMetaStore().dropTable(&quot;test_table&quot;);
    String s = cli.explainQuery(&quot;select * from test_table&quot;);
    System.out.println(s);
    //assertEquals(1, table.getRows().size());
    //Row row = table.getRows().get(0);
    //assertEquals(3, row.getFieldCount());

    // test DATE field
    //assertEquals(&quot;2018-11-01&quot;, row.getLogicalTypeValue(&quot;f_date&quot;, LocalDate.class).toString());
    // test TIME field
    //assertEquals(&quot;15:23:59&quot;, row.getLogicalTypeValue(&quot;f_time&quot;, LocalTime.class).toString());
    // test TIMESTAMP field
    //assertEquals(parseTimestampWithUTCTimeZone(&quot;2018-07-01 21:26:07.123&quot;), row.getDateTime(&quot;f_ts&quot;));
}
</code></pre>
<p>}<br>
`</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Hello Gridea]]></title>
        <id>https://old-camel-github-io.vercel.app/post/hello-gridea/</id>
        <link href="https://old-camel-github-io.vercel.app/post/hello-gridea/">
        </link>
        <updated>2018-12-11T16:00:00.000Z</updated>
        <summary type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
]]></summary>
        <content type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
<!-- more -->
<p><a href="https://github.com/getgridea/gridea">Github</a><br>
<a href="https://gridea.dev/">Gridea 主页</a><br>
<a href="http://fehey.com/">示例网站</a></p>
<h2 id="特性">特性👇</h2>
<p>📝  你可以使用最酷的 <strong>Markdown</strong> 语法，进行快速创作</p>
<p>🌉  你可以给文章配上精美的封面图和在文章任意位置插入图片</p>
<p>🏷️  你可以对文章进行标签分组</p>
<p>📋  你可以自定义菜单，甚至可以创建外部链接菜单</p>
<p>💻  你可以在 <strong>Windows</strong>，<strong>MacOS</strong> 或 <strong>Linux</strong> 设备上使用此客户端</p>
<p>🌎  你可以使用 <strong>𝖦𝗂𝗍𝗁𝗎𝖻 𝖯𝖺𝗀𝖾𝗌</strong> 或 <strong>Coding Pages</strong> 向世界展示，未来将支持更多平台</p>
<p>💬  你可以进行简单的配置，接入 <a href="https://github.com/gitalk/gitalk">Gitalk</a> 或 <a href="https://github.com/SukkaW/DisqusJS">DisqusJS</a> 评论系统</p>
<p>🇬🇧  你可以使用<strong>中文简体</strong>或<strong>英语</strong></p>
<p>🌁  你可以任意使用应用内默认主题或任意第三方主题，强大的主题自定义能力</p>
<p>🖥  你可以自定义源文件夹，利用 OneDrive、百度网盘、iCloud、Dropbox 等进行多设备同步</p>
<p>🌱 当然 <strong>Gridea</strong> 还很年轻，有很多不足，但请相信，它会不停向前 🏃</p>
<p>未来，它一定会成为你离不开的伙伴</p>
<p>尽情发挥你的才华吧！</p>
<p>😘 Enjoy~</p>
]]></content>
    </entry>
</feed>